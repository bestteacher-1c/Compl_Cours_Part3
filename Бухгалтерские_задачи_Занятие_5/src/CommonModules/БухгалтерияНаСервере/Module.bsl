Процедура ЗаполнитьПодразделениеСтороныПроводки(Движение, Подразделение,
		ДтКт) Экспорт

	Если (ЗначениеЗаполнено(Движение["Счет" + ДтКт]) = Ложь) Тогда
		Возврат;
	КонецЕсли;

	ДанныеСчета = НаСервереМожноВызватьСКлиента.ПолучитьСвойствоСчета(Движение["Счет" + ДтКт]);

	
	
	ПараметрыФО = Новый Структура;
	ПараметрыФО.Вставить("ПФО_Организация", Движение.Организация);

	ПоПодразделениям = ПолучитьФункциональнуюОпцию("УчетПоПодразделениям", ПараметрыФО);

	
	
	Если ПоПодразделениям И ДанныеСчета.ПоПодразделениям Тогда

		Движение["Подразделение" + ДтКт] = Подразделение;

	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСубконтоСтороныПроводки(Движение, ИмяИлиНомерСубконто, ЗначениеСубконто, ДтКт) Экспорт

	Если (ЗначениеЗаполнено(Движение["Счет" + ДтКт]) = Ложь) Тогда
		Возврат;
	КонецЕсли;

	ДанныеСчета = НаСервереМожноВызватьСКлиента.ПолучитьСвойствоСчета(Движение["Счет" + ДтКт]); //Получили структуру с данными счета

	Если ТипЗнч(ИмяИлиНомерСубконто) = Тип("Строка") Тогда

		Для индекс = 1 По ДанныеСчета.КоличествоСубконто Цикл

			Если ДанныеСчета["ВидСубконто" + индекс + "ИмяПредопределенныхДанных"] = ИмяИлиНомерСубконто Тогда

				Если ДанныеСчета["ВидСубконто" + индекс + "ТипЗначения"].СодержитТип(ТипЗнч(ЗначениеСубконто)) = Истина Тогда

					Движение["Субконто" + ДтКт].Вставить(ДанныеСчета["ВидСубконто" + индекс], ЗначениеСубконто);

					Прервать;
				КонецЕсли;
			КонецЕсли;

			Если ДанныеСчета["ВидСубконто" + индекс + "Наименование"] = ИмяИлиНомерСубконто Тогда

				Если ДанныеСчета["ВидСубконто" + индекс + "ТипЗначения"].СодержитТип(ТипЗнч(ЗначениеСубконто)) = Истина Тогда

					Движение["Субконто" + ДтКт].Вставить(ДанныеСчета["ВидСубконто" + индекс], ЗначениеСубконто);

					Прервать;
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;

	ИначеЕсли ТипЗнч(ИмяИлиНомерСубконто) = Тип("Число") Тогда

		Если ИмяИлиНомерСубконто <= ДанныеСчета.КоличествоСубконто Тогда

			Если ДанныеСчета["ВидСубконто" + ИмяИлиНомерСубконто + "ТипЗначения"].СодержитТип(ТипЗнч(ЗначениеСубконто))
				= Истина Тогда

				Движение["Субконто" + ДтКт].Вставить(ДанныеСчета["ВидСубконто" + ИмяИлиНомерСубконто], ЗначениеСубконто);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьКоличествоСтороныПроводки(Движение, Количество,
		ДтКт) Экспорт

	Если (ЗначениеЗаполнено(Движение["Счет" + ДтКт]) = Ложь) Тогда
		Возврат;
	КонецЕсли;

	ДанныеСчета = НаСервереМожноВызватьСКлиента.ПолучитьСвойствоСчета(Движение["Счет"
		+ ДтКт]);

	Если ДанныеСчета.Количественный = Истина Тогда

		Движение["Количество" + ДтКт] = Количество;

	КонецЕсли;

КонецПроцедуры
// Процедура - Изменить активность движений
//
// Параметры:
//  Ссылка			 - ДокументСсылка	-  Может быть ссылка на любой документ
//  НужнаяАктивность - Булево	 -  По Умолчанию = Неопределено
//
Процедура ИзменитьАктивностьДвижений(Ссылка, НужнаяАктивность = Неопределено) Экспорт

	НЗ = РегистрыБухгалтерии.Проводки.СоздатьНаборЗаписей();
	НЗ.Отбор.Регистратор.Установить(Ссылка);

	НЗ.Прочитать();

	Если НужнаяАктивность = Неопределено Тогда

		Если НЗ.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;

		НужнаяАктивность = Не НЗ[0].Активность;

	КонецЕсли;

	НЗ.УстановитьАктивность(НужнаяАктивность);

	НЗ.Записать();

КонецПроцедуры

Процедура ПроверкаЗаполненияПодразделенияОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт

	ПараметрыФО = Новый Структура;
	ПараметрыФО.Вставить("ПФО_Организация", Источник.Организация);

	ПоПодразделениям = ПолучитьФункциональнуюОпцию("УчетПоПодразделениям", ПараметрыФО);

	Если ПоПодразделениям = Ложь Тогда
		
		Индекс =  ПроверяемыеРеквизиты.Найти("Подразделение");
		
		Если Индекс <> Неопределено Тогда
		
			ПроверяемыеРеквизиты.Удалить(Индекс);
		
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры
