
Процедура ЗаполнитьПодразделениеСтороныПроводки (Движение,Подразделение,ДтКт) Экспорт 

	ПараметрыФО = Новый Структура;
	ПараметрыФО.Вставить("ПФО_Организация", Движение.Организация);
	
	ПоПодразделениям = ПолучитьФункциональнуюОпцию("УчетПоПодразделениям",ПараметрыФО);
	
	Если ПоПодразделениям И Движение["Счет" + ДтКт].ПоПодразделениям Тогда
	
		 Движение["Подразделение" + ДтКт] = Подразделение;
	
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСубконтоСтороныПроводки(Движение,ИмяИлиКоличествоСубконто,ЗначениеСубконто,ДтКт) Экспорт 

	
	Если Не ЗначениеЗаполнено(Движение["Счет" + ДтКт]) Тогда
		Возврат;  //Если не заполнен счет, то субконто не надо заполнять! 
	КонецЕсли;
	
	
	
	Если ТипЗнч(ИмяИлиКоличествоСубконто) = Тип("Строка") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетаВидыСубконто.ВидСубконто
		|ИЗ
		|	ПланСчетов.Счета.ВидыСубконто КАК СчетаВидыСубконто
		|ГДЕ
		|	СчетаВидыСубконто.Ссылка = &СсылкаНаСчет
		|	И СчетаВидыСубконто.ВидСубконто.ИмяПредопределенныхДанных = &ИмяСубконто";
		
		Запрос.УстановитьПараметр("ИмяСубконто", ИмяИлиКоличествоСубконто);
		Запрос.УстановитьПараметр("СсылкаНаСчет", Движение["Счет" + ДтКт]);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

			Движение["Субконто" + ДтКт].Вставить(
			ВыборкаДетальныеЗаписи.ВидСубконто, ЗначениеСубконто);
			
		КонецЦикла;

	ИначеЕсли ТипЗнч(ИмяИлиКоличествоСубконто) = Тип("Число") Тогда

		//----Определяем количество субконто---
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(СчетаВидыСубконто.ВидСубконто) КАК КоличествоСубконто
		|ИЗ
		|	ПланСчетов.Счета.ВидыСубконто КАК СчетаВидыСубконто
		|ГДЕ
		|	СчетаВидыСубконто.Ссылка = &СсылкаНаСчет";
		
		Запрос.УстановитьПараметр("СсылкаНаСчет", Движение["Счет" + ДтКт]);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		КоличествоСубконто = 0;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			КоличествоСубконто = ВыборкаДетальныеЗаписи.КоличествоСубконто;
			
		КонецЦикла;
		
		
		//----Проверяем, есть ли субконто с номером у данного счета
		
		Если КоличествоСубконто <= ИмяИлиКоличествоСубконто Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СчетаВидыСубконто.ВидСубконто
			|ИЗ
			|	ПланСчетов.Счета.ВидыСубконто КАК СчетаВидыСубконто
			|ГДЕ
			|	СчетаВидыСубконто.Ссылка = &Ссылка
			|	И СчетаВидыСубконто.НомерСтроки = &НомерСтроки";
			
			Запрос.УстановитьПараметр("НомерСтроки", ИмяИлиКоличествоСубконто);
			Запрос.УстановитьПараметр("Ссылка", Движение["Счет" + ДтКт]);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

				Движение["Субконто" + ДтКт].Вставить(
				ВыборкаДетальныеЗаписи.ВидСубконто, ЗначениеСубконто);
				
			КонецЦикла;
		
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьКоличествоСтороныПроводки(Движение,Количество,ДтКт) Экспорт 

	Если Движение["Счет" + ДтКт].Количественный Тогда
	
		 Движение["Количество" + ДтКт] = Количество;
	
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьВалютуСтороныПроводки(Движение,Валюта, СуммаВалюты,ДтКт) Экспорт 

	Если Движение["Счет" + ДтКт].Валютный Тогда
	
		 Движение["Валюта" + ДтКт] = Валюта;
		 Движение["СуммаВалюты" + ДтКт] = СуммаВалюты;
	
	КонецЕсли;

КонецПроцедуры



Функция ПересчитатьИзВалютыВВалюту(ВалютаИЗ,ВалютаВ,СуммаИз,Дата) Экспорт 

	Если СуммаИз = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ВалютаИЗ = Неопределено Тогда
		ВалютаИЗ = Справочники.Валюты.РубльРФ;
	КонецЕсли;
	
	Если ВалютаВ = Неопределено Тогда
		ВалютаВ = Справочники.Валюты.РубльРФ;
	КонецЕсли;
	
	Если ВалютаВ = ВалютаИЗ Тогда
		Возврат СуммаИз;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"	ВЫБРАТЬ
	 	|	СУММА(ВЫБОР
	 	|			КОГДА КурсыВалютСрезПоследних.Валюта = &ВалютаВ
	 	|				ТОГДА КурсыВалютСрезПоследних.Курс
	 	|			ИНАЧЕ 0
	 	|		КОНЕЦ) КАК КурсВ,
	 	|	СУММА(ВЫБОР
	 	|			КОГДА КурсыВалютСрезПоследних.Валюта = &ВалютаИз
	 	|				ТОГДА КурсыВалютСрезПоследних.Курс
	 	|			ИНАЧЕ 0
	 	|		КОНЕЦ) КАК КурсИз
	 	|ПОМЕСТИТЬ ВТИсходная
	 	|ИЗ
	 	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта В (&ВалютаИз, &ВалютаВ)) КАК КурсыВалютСрезПоследних
	 	|;
	 	|
	 	|////////////////////////////////////////////////////////////////////////////////
	 	|ВЫБРАТЬ
	 	|	ВЫБОР ВТИсходная.КурсВ
	 	|		КОГДА 0
	 	|			ТОГДА 0
	 	|		ИНАЧЕ &СуммаИЗ * ВТИсходная.КурсИз / ВТИсходная.КурсВ
	 	|	КОНЕЦ КАК СуммаВ
	 	|ИЗ
	 	|	ВТИсходная КАК ВТИсходная";
	
	Запрос.УстановитьПараметр("ВалютаИЗ", ВалютаИЗ);
	Запрос.УстановитьПараметр("ВалютаВ", ВалютаВ);
	Запрос.УстановитьПараметр("СуммаИЗ", СуммаИЗ);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

		Возврат ВыборкаДетальныеЗаписи.СуммаВ;
		
	КонецЦикла;

	Возврат 0;

КонецФункции // ПересчитатьИзВалютыВВалюту()

// Процедура - Изменить активность движений
//
// Параметры:
//  Ссылка			 - ДокументСсылка	-  Может быть ссылка на любой документ
//  НужнаяАктивность - Булево	 -  По Умолчанию = Неопределено
//
Процедура ИзменитьАктивностьДвижений(Ссылка, НужнаяАктивность = Неопределено) Экспорт

	НЗ = РегистрыБухгалтерии.Проводки.СоздатьНаборЗаписей();
	НЗ.Отбор.Регистратор.Установить(Ссылка);
	
	НЗ.Прочитать();
	
	Если НужнаяАктивность = Неопределено Тогда
		
		Если НЗ.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		НужнаяАктивность = Не НЗ[0].Активность;
		
	КонецЕсли;
	
	НЗ.УстановитьАктивность(НужнаяАктивность);
	
	НЗ.Записать();
	
	
КонецПроцедуры // ИзменитьАктивностьДвижений()


Процедура ПроверкаЗаполненияПодразделенияОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Возврат;
	
	ПараметрыФО = Новый Структура;
	ПараметрыФО.Вставить("ПФО_Организация", Источник.Организация);
	
	ПоПодразделениям = ПолучитьФункциональнуюОпцию("УчетПоПодразделениям",ПараметрыФО);
	
	Если Не ПоПодразделениям Тогда
	
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Подразделение"));
	
	КонецЕсли;

	
КонецПроцедуры
