Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	ДополнительныеСвойства.Вставить("НадоЗаписыватьПустойНаборЗаписей", Ложь);

	Если (ЭтоНовый() = Ложь) Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
			|	РеализацияТоваровИУслуг.Дата
			|ИЗ
			|	Документ.РеализацияТоваровИУслуг КАК РеализацияТоваровИУслуг
			|ГДЕ
			|	РеализацияТоваровИУслуг.Ссылка = &Ссылка";

		Запрос.УстановитьПараметр("Ссылка", Ссылка);

		РезультатЗапроса = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

		ВыборкаДетальныеЗаписи.Следующий();

		ДополнительныеСвойства.Вставить("ДатаДоЗаписи", ВыборкаДетальныеЗаписи.Дата);

	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписи(Отказ)

	Если ДополнительныеСвойства.Свойство("ДатаДоЗаписи") = Истина Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
			|	РеализацияТоваровИУслуг.Дата
			|ИЗ
			|	Документ.РеализацияТоваровИУслуг КАК РеализацияТоваровИУслуг
			|ГДЕ
			|	РеализацияТоваровИУслуг.Ссылка = &Ссылка";

		Запрос.УстановитьПараметр("Ссылка", Ссылка);

		РезультатЗапроса = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

		ВыборкаДетальныеЗаписи.Следующий();

		Если (ВыборкаДетальныеЗаписи.Дата > ДополнительныеСвойства.ДатаДоЗаписи) Тогда

			ДополнительныеСвойства.Вставить("НадоЗаписыватьПустойНаборЗаписей", Истина);

		КонецЕсли;

	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)

	Если ВидОперации = Перечисления.ВидыОперацийПродажиТоваров.Продажа Тогда

		ПродажаТовара(Отказ, Режим);

	Иначе

		ВозвратТовараВладельцу(Отказ, Режим);

	КонецЕсли;

	Если Отказ = Ложь Тогда

		Движения.Проводки.Записывать = Истина;

	КонецЕсли;

КонецПроцедуры

Процедура ПродажаТовара(Отказ, Режим)

	//В учебных целях (для упрощения) делаем допущение, что складской учет ведется.

	//--БЛОКИРОВКА
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	РеализацияТоваровИУслугТовары.Ссылка.Организация КАК Организация,
		|	РеализацияТоваровИУслугТовары.Ссылка.Подразделение КАК Подразделение,
		|	РеализацияТоваровИУслугТовары.СчетУчета КАК СчетУчета,
		|	РеализацияТоваровИУслугТовары.Номенклатура КАК Аналитика1,
		|	РеализацияТоваровИУслугТовары.Ссылка.Склад КАК Аналитика2
		|ИЗ
		|	Документ.РеализацияТоваровИУслуг.Товары КАК РеализацияТоваровИУслугТовары
		|ГДЕ
		|	РеализацияТоваровИУслугТовары.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	РезультатЗапроса = Запрос.Выполнить();

	Блокировка = Новый БлокировкаДанных;

	ЧтоБлокируем = Блокировка.Добавить("РегистрБухгалтерии.Проводки");

	ЧтоБлокируем.ИсточникДанных = РезультатЗапроса;

	ЧтоБлокируем.ИспользоватьИзИсточникаДанных("Счет", "СчетУчета");
	ЧтоБлокируем.ИспользоватьИзИсточникаДанных("Организация", "Организация");
	ЧтоБлокируем.ИспользоватьИзИсточникаДанных("Подразделение", "Подразделение");
	ЧтоБлокируем.ИспользоватьИзИсточникаДанных("Субконто1", "Аналитика1");
	ЧтоБлокируем.ИспользоватьИзИсточникаДанных("Субконто2", "Аналитика2");

	Блокировка.Заблокировать();

	//--ОЧИСТКА ДВИЖЕНИЙ ЭТОГО ДОКУМЕНТА В БАЗЕ ДАННЫХ
	Если (ДополнительныеСвойства.НадоЗаписыватьПустойНаборЗаписей = Истина) Тогда

		Движения.Проводки.Записывать = Истина;
		Движения.Записать();

	КонецЕсли;

	// ---  ЗАПРОС
	Запрос = Новый Запрос;

	ПорядокСубконто = Новый Массив;
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Номенклатура);
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Склады);

	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Период", МоментВремени());
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ПорядокСубконто", ПорядокСубконто);

	Запрос.Текст = "ВЫБРАТЬ
	|	РеализацияТоваровИУслугТовары.Номенклатура КАК Номенклатура,
	|	СУММА(РеализацияТоваровИУслугТовары.Количество) КАК Количество,
	|	СУММА(РеализацияТоваровИУслугТовары.Сумма) КАК Сумма,
	|	РеализацияТоваровИУслугТовары.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ ВТТоварыДокумента
	|ИЗ
	|	Документ.РеализацияТоваровИУслуг.Товары КАК РеализацияТоваровИУслугТовары
	|ГДЕ
	|	РеализацияТоваровИУслугТовары.Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровИУслугТовары.Номенклатура,
	|	РеализацияТоваровИУслугТовары.СчетУчета
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроводкиОстатки.Счет КАК Счет,
	|	ПроводкиОстатки.Субконто1 КАК Субконто1,
	|	ПроводкиОстатки.КоличествоОстатокДт КАК КоличествоОстатокДт
	|ПОМЕСТИТЬ ВТОстаткиСклад
	|ИЗ
	|	РегистрБухгалтерии.Проводки.Остатки(&Период, Счет В
	|		(ВЫБРАТЬ
	|			ВТТоварыДокумента.СчетУчета КАК СчетУчета
	|		ИЗ
	|			ВТТоварыДокумента КАК ВТТоварыДокумента), &ПорядокСубконто, Организация = &Организация
	|	И Подразделение = &Подразделение
	|	И Субконто2 = &Склад
	|	И Субконто1 В
	|		(ВЫБРАТЬ
	|			ВТТоварыДокумента.Номенклатура КАК Номенклатура
	|		ИЗ
	|			ВТТоварыДокумента КАК ВТТоварыДокумента)) КАК ПроводкиОстатки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроводкиОстатки.Счет КАК Счет,
	|	ПроводкиОстатки.Субконто1 КАК Субконто1,
	|	ПроводкиОстатки.КоличествоОстатокДт КАК КоличествоОстатокДт,
	|	ПроводкиОстатки.СуммаОстатокДт КАК СуммаОстатокДт
	|ПОМЕСТИТЬ ВТОстаткиВсе
	|ИЗ
	|	РегистрБухгалтерии.Проводки.Остатки(&Период, Счет В
	|		(ВЫБРАТЬ
	|			ВТТоварыДокумента.СчетУчета КАК СчетУчета
	|		ИЗ
	|			ВТТоварыДокумента КАК ВТТоварыДокумента), &ПорядокСубконто, Организация = &Организация
	|	И Подразделение = &Подразделение
	|	И Субконто1 В
	|		(ВЫБРАТЬ
	|			ВТТоварыДокумента.Номенклатура КАК Номенклатура
	|		ИЗ
	|			ВТТоварыДокумента КАК ВТТоварыДокумента)) КАК ПроводкиОстатки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТоварыДокумента.Номенклатура КАК Номенклатура,
	|	ВТТоварыДокумента.Количество КАК Количество,
	|	ВТТоварыДокумента.Сумма КАК Сумма,
	|	ВТТоварыДокумента.СчетУчета КАК СчетУчета,
	|	ЕСТЬNULL(ВТОстаткиСклад.КоличествоОстатокДт, 0) КАК КоличествоОстатокДт,
	|	ВЫБОР
	|		КОГДА ВТОстаткиВсе.КоличествоОстатокДт ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ВТОстаткиВсе.КоличествоОстатокДт = 0
	|			ТОГДА 0
	|		КОГДА ВТОстаткиВсе.КоличествоОстатокДт = ВТТоварыДокумента.Количество
	|			ТОГДА ВТОстаткиВсе.СуммаОстатокДт
	|		ИНАЧЕ ВТОстаткиВсе.СуммаОстатокДт / ВТОстаткиВсе.КоличествоОстатокДт * ВТТоварыДокумента.Количество
	|	КОНЕЦ КАК Себестоимость
	|ИЗ
	|	ВТТоварыДокумента КАК ВТТоварыДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиСклад КАК ВТОстаткиСклад
	|		ПО ВТТоварыДокумента.СчетУчета = ВТОстаткиСклад.Счет
	|		И ВТТоварыДокумента.Номенклатура = ВТОстаткиСклад.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиВсе КАК ВТОстаткиВсе
	|		ПО ВТТоварыДокумента.СчетУчета = ВТОстаткиВсе.Счет
	|		И ВТТоварыДокумента.Номенклатура = ВТОстаткиВсе.Субконто1";

	Результат = Запрос.Выполнить();

	//--ВЫБОРКА ИЗ РЕЗУЛЬТАТА ЗАПРОСА
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

	//--ПРОВЕРКА НАЛИЧИЯ УЧТЕННОГО ТМЦ ПО СЧЕТУ НА СКЛАДЕ
		Нехватка = ВыборкаДетальныеЗаписи.Количество - ВыборкаДетальныеЗаписи.КоличествоОстатокДт;

		Если Нехватка > 0 Тогда

			Отказ = Истина;

			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = "Для проведения по данным бухгалтерского учета по счету "
				+ ВыборкаДетальныеЗаписи.СчетУчета + " не хватает номенклатуры """ + ВыборкаДетальныеЗаписи.Номенклатура
				+ """. Нехватка составляет " + Нехватка + " ед.";

			Сообщение.Сообщить();

		КонецЕсли;

		//--Формируем движения в регистре бухгелтрии
		Если Отказ = Ложь Тогда

		//=========================================================================
			//-- ПРОВОДКА = ДЕБЕТ (90) РАСХОДЫ -  КРЕДИТ СЧЕТ УЧЕТА ТМЦ (10, 41.1, 41.2) - СУММА СЕБЕСТОИМОСТИ 
			Движение = Движения.Проводки.Добавить();

			Движение.Период = Дата;
			Движение.СодержаниеПроводки = "Себестоимость продажи";
			Движение.Организация = Организация;
			Движение.Сумма = ВыборкаДетальныеЗаписи.Себестоимость;

			Движение.СчетДт = ПланыСчетов.Счета.РасходыДоходы;
			БухгалтерияНаСервере.ЗаполнитьПодразделениеСтороныПроводки(Движение, Подразделение, "Дт");

			Движение.СчетКт = ВыборкаДетальныеЗаписи.СчетУчета;

			БухгалтерияНаСервере.ЗаполнитьПодразделениеСтороныПроводки(Движение, Подразделение, "Кт");
			БухгалтерияНаСервере.ЗаполнитьКоличествоСтороныПроводки(Движение, ВыборкаДетальныеЗаписи.Количество, "Кт");

			БухгалтерияНаСервере.ЗаполнитьСубконтоСтороныПроводки(Движение, "Номенклатура", ВыборкаДетальныеЗаписи.Номенклатура, "Кт");
			БухгалтерияНаСервере.ЗаполнитьСубконтоСтороныПроводки(Движение, "Склады", Склад, "Кт");
			БухгалтерияНаСервере.ЗаполнитьСубконтоСтороныПроводки(Движение, "Контрагенты", Контрагент, "Кт");

			//=========================================================================
			//-- ПРОВОДКА = ДЕБЕТ (62.1) РАСЧЕТЫ С ПОКУПАТЕЛЕМ - ТМЦ КРЕДИТ (90) ДОХОДЫ
			Движение = Движения.Проводки.Добавить();

			Движение.Период = Дата;
			Движение.СодержаниеПроводки = "Выручка от продажи";
			Движение.Организация = Организация;
			Движение.Сумма = ВыборкаДетальныеЗаписи.Сумма;

			Движение.СчетДт = ПланыСчетов.Счета.ПокупателямОтгрузили;

			БухгалтерияНаСервере.ЗаполнитьПодразделениеСтороныПроводки(Движение, Подразделение, "Дт");

			БухгалтерияНаСервере.ЗаполнитьСубконтоСтороныПроводки(Движение, "Контрагенты", Контрагент, "Дт");
			БухгалтерияНаСервере.ЗаполнитьСубконтоСтороныПроводки(Движение, "Договоры", Договор, "Дт");

			//ОбщийМодульНаСервере.ЗаполнитьВалютуСтороныПроводки(Движение, Валюта, Выборка.Сумма, "Дт");

			Движение.СчетКт = ПланыСчетов.Счета.РасходыДоходы;

			БухгалтерияНаСервере.ЗаполнитьПодразделениеСтороныПроводки(Движение, Подразделение, "Кт");
			БухгалтерияНаСервере.ЗаполнитьСубконтоСтороныПроводки(Движение, "Номенклатура", ВыборкаДетальныеЗаписи.Номенклатура, "Кт");

		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ВозвратТовараВладельцу(Отказ, Режим)

//Контрольная работа...

//--ОЧИСТКА ДВИЖЕНИЙ ЭТОГО ДОКУМЕНТА В БАЗЕ ДАННЫХ
	
	Движения.Проводки.Записывать = Истина;
	Движения.Записать();
	
	//--БЛОКИРОВКА
	#Область Блокировка
	
	Блокировка = Новый БлокировкаДанных;
	
	ЧтоБлокируем = Блокировка.Добавить("РегистрБухгалтерии.Проводки");
	ЧтоБлокируем.Режим = РежимБлокировкиДанных.Исключительный;
	
	ЧтоБлокируем.УстановитьЗначение("Организация", Организация);
	ЧтоБлокируем.УстановитьЗначение("Подразделение", Подразделение);
	
	МассисТипов = Новый Массив;
	МассисТипов.Добавить("СправочникСсылка.Номенклатура");
	МассисТипов.Добавить("СправочникСсылка.Контрагенты");
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Счет",Новый ОписаниеТипов("ПланСчетовСсылка.Счета"));
	ТЗ.Колонки.Добавить("Субконто_1",Новый ОписаниеТипов(МассисТипов));
	ТЗ.Колонки.Добавить("Субконто_2",Новый ОписаниеТипов(МассисТипов));
	
	Для каждого ТекСтрока Из Товары Цикл
		
		НоваяСтрокаТЗ = ТЗ.Добавить();
		НоваяСтрокаТЗ.Счет = ТекСтрока.СчетУчета;
		
		Если ТекСтрока.СчетУчета.ВидыСубконто.Получить(0).ВидСубконто 
			= ПланыВидовХарактеристик.ВидыСубконто.Номенклатура Тогда
			
			НоваяСтрокаТЗ.Субконто_1 = ТекСтрока.Номенклатура;
			НоваяСтрокаТЗ.Субконто_2 = Контрагент;
			
		Иначе
			
			НоваяСтрокаТЗ.Субконто_1 = Контрагент;
			НоваяСтрокаТЗ.Субконто_2 = ТекСтрока.Номенклатура;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	ЧтоБлокируем.ИсточникДанных = ТЗ;
	ЧтоБлокируем.ИспользоватьИзИсточникаДанных("Счет","Счет");
	ЧтоБлокируем.ИспользоватьИзИсточникаДанных("Субконто1","Субконто_1");
	ЧтоБлокируем.ИспользоватьИзИсточникаДанных("Субконто2","Субконто_2");
	
	
	Блокировка.Заблокировать();
	
	#КонецОбласти 	
	
	// ---  ЗАПРОС
	
	ПорядокСубконто = Новый Массив;
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Номенклатура);
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Контрагенты);
	
	
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Момент", МоментВремени());
	Запрос.УстановитьПараметр("ПорядокСубконто", ПорядокСубконто);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	
	Запрос.Текст = "ВЫБРАТЬ
	|	РеализацияТоваровИУслугТовары.СчетУчета,
	|	РеализацияТоваровИУслугТовары.Номенклатура,
	|	СУММА(РеализацияТоваровИУслугТовары.Количество) КАК Количество,
	|	СУММА(РеализацияТоваровИУслугТовары.Сумма) КАК Сумма,
	|	РеализацияТоваровИУслугТовары.СчетУчета.Забалансовый
	|ПОМЕСТИТЬ ВТДокумент
	|ИЗ
	|	Документ.РеализацияТоваровИУслуг.Товары КАК РеализацияТоваровИУслугТовары
	|ГДЕ
	|	РеализацияТоваровИУслугТовары.Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровИУслугТовары.СчетУчета,
	|	РеализацияТоваровИУслугТовары.Номенклатура,
	|	РеализацияТоваровИУслугТовары.СчетУчета.Забалансовый
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроводкиОстатки.Счет,
	|	ПроводкиОстатки.Субконто1,
	|	ПроводкиОстатки.СуммаОстатокДт,
	|	ПроводкиОстатки.КоличествоОстатокДт
	|ПОМЕСТИТЬ ВТОстаткиКонтрагент
	|ИЗ
	|	РегистрБухгалтерии.Проводки.Остатки(&Момент, Счет В
	|		(ВЫБРАТЬ
	|			ВТДокумент.СчетУчета
	|		ИЗ
	|			ВТДокумент КАК ВТДокумент), &ПорядокСубконто, Организация = &Организация
	|	И Подразделение = &Подразделение
	|	И Субконто2 = &Контрагент
	|	И Субконто1 В
	|		(ВЫБРАТЬ
	|			ВТДокумент.Номенклатура
	|		ИЗ
	|			ВТДокумент КАК ВТДокумент)) КАК ПроводкиОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДокумент.СчетУчета,
	|	ВТДокумент.СчетУчетаЗабалансовый,
	|	ВТДокумент.Номенклатура,
	|	ВТДокумент.Количество КАК ДокКол,
	|	ВТДокумент.Сумма КАК ДокСум,
	|	ЕСТЬNULL(ВТОстаткиКонтрагент.КоличествоОстатокДт, 0) КАК РегКол,
	|	ВЫБОР
	|		КОГДА ВТОстаткиКонтрагент.СуммаОстатокДт ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ВТОстаткиКонтрагент.КоличествоОстатокДт = 0
	|			ТОГДА 0
	|		КОГДА ВТОстаткиКонтрагент.КоличествоОстатокДт = ВТДокумент.Количество
	|			ТОГДА ВТОстаткиКонтрагент.СуммаОстатокДт
	|		ИНАЧЕ ВТОстаткиКонтрагент.СуммаОстатокДт / ВТОстаткиКонтрагент.КоличествоОстатокДт * ВТДокумент.Количество
	|	КОНЕЦ КАК Себестоимость
	|ИЗ
	|	ВТДокумент КАК ВТДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиКонтрагент КАК ВТОстаткиКонтрагент
	|		ПО ВТДокумент.СчетУчета = ВТОстаткиКонтрагент.Счет
	|		И ВТДокумент.Номенклатура = ВТОстаткиКонтрагент.Субконто1";
	
	Результат = Запрос.Выполнить();
	
	//--ВЫБОРКА ИЗ РЕЗУЛЬТАТА ЗАПРОСА
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		//--ПРОВЕРКА НАЛИЧИЯ УЧТЕННОГО ТМЦ ПО СЧЕТУ ПРИНАДЛЕЖАЩЕГО ДАННОМУ КОНТРАГЕНТУ
		
		Нехватка = Выборка.ДокКол - Выборка.РегКол;
		
		Если Нехватка > 0 Тогда
			
			Отказ = Истина;
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = "Для проведения по данным бухгалтерского учета по счету "
			+ Выборка.СчетУчета + " не хватает номенклатуры """
			+ Выборка.Номенклатура + """. Нехватка составляет " + Нехватка + " ед.";
			
			Сообщение.Сообщить();
			
		КонецЕсли; 
		
		//--Формируем движения в регистре бухгелтрии
		
		Если Отказ = Ложь Тогда
			
			//=========================================================================
			//-- ПРОВОДКА = ДЕБЕТ - НЕТ  СЧЕТА -  КРЕДИТ СЧЕТ ТОВАРЫ НА ХРАНЕНИИ (001) - ЗАЛОГОВАЯ СУММА  
			
			Движение = Движения.Проводки.Добавить();
			
			Движение.Период = Дата;
			Движение.СодержаниеПроводки = "Возврат ТМЦ с хранения";
			Движение.Организация = Организация;
			Движение.Сумма = Выборка.Себестоимость;
			
			
			
			Движение.СчетКт = Выборка.СчетУчета;
			
			БухгалтерияНаСервере.ЗаполнитьПодразделениеСтороныПроводки(Движение, Подразделение, "Кт");
			БухгалтерияНаСервере.ЗаполнитьКоличествоСтороныПроводки(Движение, Выборка.ДокКол, "Кт");
			
			БухгалтерияНаСервере.ЗаполнитьСубконтоСтороныПроводки(Движение, "Номенклатура", Выборка.Номенклатура, "Кт");
			БухгалтерияНаСервере.ЗаполнитьСубконтоСтороныПроводки(Движение, "Склады", Склад, "Кт");
			БухгалтерияНаСервере.ЗаполнитьСубконтоСтороныПроводки(Движение, "Контрагенты", Контрагент, "Кт");
			
		КонецЕсли;	
		
	КонецЦикла;


КонецПроцедуры



