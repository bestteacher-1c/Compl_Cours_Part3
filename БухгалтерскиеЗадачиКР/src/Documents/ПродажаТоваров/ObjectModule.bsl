Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ПолучитьФункциональнуюОпцию("УчетПоПодразделениям"
		, Новый Структура("ПФО_Организация", Организация)) = Ложь Тогда
	
		  Индекс = ПроверяемыеРеквизиты.Найти("Подразделение");
			ПроверяемыеРеквизиты.Удалить(Индекс);
			
	
	КонецЕсли;                      
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)

	Если ВидОперации = Перечисления.ВидыОперацийПродажиТоваров.Продажа Тогда
	
		ПродажаТовара(Отказ, Режим);
		
	Иначе
		
		ВозвратТовараВладельцу(Отказ, Режим);
	
	КонецЕсли;
	
	
	Если Отказ = Ложь Тогда
		
		Движения.Проводки.Записывать = Истина;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПродажаТовара(Отказ, Режим)

	//В учебных целях (для упрощения) делаем допущение, что складской учет ведется.
	
	//--Получаем кросс курс. Нужен, если по счетам расчетов ведется валютный учет.
	
	КроссКурс = СерверныйСВызовом.ПересчитатьИзВалютыВВалютуНаСервере(Валюта,,1,Дата);
	
	//--ОЧИСТКА ДВИЖЕНИЙ ЭТОГО ДОКУМЕНТА В БАЗЕ ДАННЫХ
	
	Движения.Проводки.Записывать = Истина;
	Движения.Записать();
	
	//--БЛОКИРОВКА
	#Область Блокировка
	
	Блокировка = Новый БлокировкаДанных;
	
	ЧтоБлокируем = Блокировка.Добавить("РегистрБухгалтерии.Проводки");
	ЧтоБлокируем.Режим = РежимБлокировкиДанных.Исключительный;
	
	ЧтоБлокируем.УстановитьЗначение("Организация", Организация);
	ЧтоБлокируем.УстановитьЗначение("Подразделение", Подразделение);
	
	МассисТипов = Новый Массив;
	МассисТипов.Добавить("СправочникСсылка.Номенклатура");
	МассисТипов.Добавить("СправочникСсылка.Склады");
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Счет",Новый ОписаниеТипов("ПланСчетовСсылка.Счета"));
	ТЗ.Колонки.Добавить("Субконто_1",Новый ОписаниеТипов(МассисТипов));
	ТЗ.Колонки.Добавить("Субконто_2",Новый ОписаниеТипов(МассисТипов));
	
	Для каждого ТекСтрока Из Товары Цикл
		
		НоваяСтрокаТЗ = ТЗ.Добавить();
		НоваяСтрокаТЗ.Счет = ТекСтрока.СчетУчета;
		
		Если ТекСтрока.СчетУчета.ВидыСубконто.Получить(0).ВидСубконто 
			= ПланыВидовХарактеристик.ВидыСубконто.Номенклатура Тогда
			
			НоваяСтрокаТЗ.Субконто_1 = ТекСтрока.Номенклатура;
			НоваяСтрокаТЗ.Субконто_2 = Склад;
			
		Иначе
			
			НоваяСтрокаТЗ.Субконто_1 = Склад;
			НоваяСтрокаТЗ.Субконто_2 = ТекСтрока.Номенклатура;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтоБлокируем.ИсточникДанных = ТЗ;
	ЧтоБлокируем.ИспользоватьИзИсточникаДанных("Счет","Счет");
	ЧтоБлокируем.ИспользоватьИзИсточникаДанных("Субконто1","Субконто_1");
	ЧтоБлокируем.ИспользоватьИзИсточникаДанных("Субконто2","Субконто_2");
	
	
	Блокировка.Заблокировать();
	
	#КонецОбласти 	
	
	// ---  ЗАПРОС
	
		
	ПорядокСубконто = Новый Массив;
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Номенклатура);
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Склады);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Момент", МоментВремени());
	Запрос.УстановитьПараметр("ПорядокСубконто", ПорядокСубконто);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПродажаТоваровТовары.СчетУчета,
	|	ПродажаТоваровТовары.Номенклатура,
	|	СУММА(ПродажаТоваровТовары.Количество) КАК Количество,
	|	СУММА(ПродажаТоваровТовары.Сумма) КАК Сумма,
	|	ПродажаТоваровТовары.СчетУчета.Забалансовый
	|ПОМЕСТИТЬ ВТДокумент
	|ИЗ
	|	Документ.ПродажаТоваров.Товары КАК ПродажаТоваровТовары
	|ГДЕ
	|	ПродажаТоваровТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПродажаТоваровТовары.СчетУчета,
	|	ПродажаТоваровТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроводкиОстатки.Счет,
	|	ПроводкиОстатки.Субконто1,
	|	ПроводкиОстатки.СуммаОстатокДт,
	|	ПроводкиОстатки.КоличествоОстатокДт
	|ПОМЕСТИТЬ ВТОстаткиСклад
	|ИЗ
	|	РегистрБухгалтерии.Проводки.Остатки(
	|			&Момент,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ВТДокумент.СчетУчета
	|				ИЗ
	|					ВТДокумент КАК ВТДокумент),
	|			&ПорядокСубконто,
	|			Организация = &Организация
	|				И Подразделение = &Подразделение
	|				И Субконто2 = &Склад
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						ВТДокумент.Номенклатура
	|					ИЗ
	|						ВТДокумент КАК ВТДокумент)) КАК ПроводкиОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроводкиОстатки.Счет,
	|	ПроводкиОстатки.Субконто1,
	|	ПроводкиОстатки.СуммаОстатокДт,
	|	ПроводкиОстатки.КоличествоОстатокДт
	|ПОМЕСТИТЬ ВТОстаткиВсе
	|ИЗ
	|	РегистрБухгалтерии.Проводки.Остатки(
	|			&Момент,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ВТДокумент.СчетУчета
	|				ИЗ
	|					ВТДокумент КАК ВТДокумент),
	|			&ПорядокСубконто,
	|			Организация = &Организация
	|				И Подразделение = &Подразделение
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						ВТДокумент.Номенклатура
	|					ИЗ
	|						ВТДокумент КАК ВТДокумент)) КАК ПроводкиОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДокумент.СчетУчета,
	|	ВТДокумент.СчетУчетаЗабалансовый,
	|	ВТДокумент.Номенклатура,
	|	ВТДокумент.Количество КАК ДокКол,
	|	ВТДокумент.Сумма КАК ДокСум,
	|	ЕСТЬNULL(ВТОстаткиСклад.КоличествоОстатокДт, 0) КАК РегКол,
	|	ВЫБОР
	|		КОГДА ВТОстаткиВсе.СуммаОстатокДт ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ВТОстаткиВсе.КоличествоОстатокДт = 0
	|			ТОГДА 0
	|		КОГДА ВТОстаткиВсе.КоличествоОстатокДт = ВТДокумент.Количество
	|			ТОГДА ВТОстаткиВсе.СуммаОстатокДт
	|		ИНАЧЕ ВТОстаткиВсе.СуммаОстатокДт / ВТОстаткиВсе.КоличествоОстатокДт * ВТДокумент.Количество
	|	КОНЕЦ КАК Себестоимость
	|ИЗ
	|	ВТДокумент КАК ВТДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиСклад КАК ВТОстаткиСклад
	|		ПО ВТДокумент.СчетУчета = ВТОстаткиСклад.Счет
	|			И ВТДокумент.Номенклатура = ВТОстаткиСклад.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиВсе КАК ВТОстаткиВсе
	|		ПО ВТДокумент.СчетУчета = ВТОстаткиВсе.Счет
	|			И ВТДокумент.Номенклатура = ВТОстаткиВсе.Субконто1";

	Результат = Запрос.Выполнить();
	
	//--ВЫБОРКА ИЗ РЕЗУЛЬТАТА ЗАПРОСА
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		//--ПРОВЕРКА НАЛИЧИЯ УЧТЕННОГО ТМЦ ПО СЧЕТУ НА СКЛАДЕ
		
		Нехватка = Выборка.ДокКол - Выборка.РегКол;
		
		Если Нехватка > 0 Тогда
			
			Отказ = Истина;
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = "Для проведения по данным бухгалтерского учета по счету "
			+ Выборка.СчетУчета + " не хватает номенклатуры """
			+ Выборка.Номенклатура + """. Нехватка составляет " + Нехватка + " ед.";
			
			Сообщение.Сообщить();
			
		КонецЕсли; 
		
		//--Формируем движения в регистре бухгелтрии
		
		Если Отказ = Ложь Тогда
			
			//=========================================================================
			//-- ПРОВОДКА = ДЕБЕТ (90) РАСХОДЫ -  КРЕДИТ СЧЕТ УЧЕТА ТМЦ (10, 41.1, 41.2) - СУММА СЕБЕСТОИМОСТИ 
		
			Движение = Движения.Проводки.Добавить();
			
			Движение.Период = Дата;
			Движение.СодержаниеПроводки = "Себестоимость продажи";
			Движение.Организация = Организация;
			Движение.Сумма = Выборка.Себестоимость;
			
			
			Движение.СчетДт = ПланыСчетов.Счета.РасходыДоходы;
			Серверный.ЗаполнитьПодразделениеСтороныПроводки(Движение, Подразделение, "Дт");
			
			
			
			Движение.СчетКт = Выборка.СчетУчета;
			
			Серверный.ЗаполнитьПодразделениеСтороныПроводки(Движение, Подразделение, "Кт");
			Серверный.ЗаполнитьКоличествоСтороныПроводки(Движение, Выборка.ДокКол, "Кт");
			
			Серверный.ЗаполнитьСубконтоСтороныПроводки(Движение, "Номенклатура", Выборка.Номенклатура, "Кт");
			Серверный.ЗаполнитьСубконтоСтороныПроводки(Движение, "Склады", Склад, "Кт");
			Серверный.ЗаполнитьСубконтоСтороныПроводки(Движение, "Контрагенты", Контрагент, "Кт");
			
			
			//=========================================================================
			//-- ПРОВОДКА = ДЕБЕТ (62.1) РАСЧЕТЫ С ПОКУПАТЕЛЕМ - ТМЦ КРЕДИТ (90) ДОХОДЫ
			
			
			Если Выборка.СчетУчетаЗабалансовый = Ложь Тогда
				
				Движение = Движения.Проводки.Добавить();
				
				Движение.Период = Дата;
				Движение.СодержаниеПроводки = "Выручка от продажи";
				Движение.Организация = Организация;
				Движение.Сумма = Выборка.ДокСум * КроссКурс; //Кросс курс получили в начале процедуры
				
				Движение.СчетДт = ПланыСчетов.Счета.ПокупателямОтгрузили;
				
				Серверный.ЗаполнитьПодразделениеСтороныПроводки(Движение, Подразделение, "Дт");
				
				Серверный.ЗаполнитьСубконтоСтороныПроводки(Движение, "Контрагенты", Контрагент, "Дт");
				Серверный.ЗаполнитьСубконтоСтороныПроводки(Движение, "Договоры", Договор, "Дт");
				
				Серверный.ЗаполнитьВалютуСтороныПроводки(Движение,Валюта,Выборка.ДокСум,"Дт");
				
				Движение.СчетКт = ПланыСчетов.Счета.РасходыДоходы;
				
				Серверный.ЗаполнитьПодразделениеСтороныПроводки(Движение, Подразделение, "Кт");
				
				//?
				Серверный.ЗаполнитьСубконтоСтороныПроводки(Движение, "Номенклатура", Выборка.Номенклатура, "Кт");
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	
	
КонецПроцедуры

Процедура ВозвратТовараВладельцу(Отказ, Режим)
	
	//--ОЧИСТКА ДВИЖЕНИЙ ЭТОГО ДОКУМЕНТА В БАЗЕ ДАННЫХ
	
	Движения.Проводки.Записывать = Истина;
	Движения.Записать();
	
	//--БЛОКИРОВКА
	#Область Блокировка
	
	Блокировка = Новый БлокировкаДанных;
	
	ЧтоБлокируем = Блокировка.Добавить("РегистрБухгалтерии.Проводки");
	ЧтоБлокируем.Режим = РежимБлокировкиДанных.Исключительный;
	
	ЧтоБлокируем.УстановитьЗначение("Организация", Организация);
	ЧтоБлокируем.УстановитьЗначение("Подразделение", Подразделение);
	
	МассисТипов = Новый Массив;
	МассисТипов.Добавить("СправочникСсылка.Номенклатура");
	МассисТипов.Добавить("СправочникСсылка.Контрагенты");
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Счет",Новый ОписаниеТипов("ПланСчетовСсылка.Счета"));
	ТЗ.Колонки.Добавить("Субконто_1",Новый ОписаниеТипов(МассисТипов));
	ТЗ.Колонки.Добавить("Субконто_2",Новый ОписаниеТипов(МассисТипов));
	
	Для каждого ТекСтрока Из Товары Цикл
		
		НоваяСтрокаТЗ = ТЗ.Добавить();
		НоваяСтрокаТЗ.Счет = ТекСтрока.СчетУчета;
		
		Если ТекСтрока.СчетУчета.ВидыСубконто.Получить(0).ВидСубконто 
			= ПланыВидовХарактеристик.ВидыСубконто.Номенклатура Тогда
			
			НоваяСтрокаТЗ.Субконто_1 = ТекСтрока.Номенклатура;
			НоваяСтрокаТЗ.Субконто_2 = Контрагент;
			
		Иначе
			
			НоваяСтрокаТЗ.Субконто_1 = Контрагент;
			НоваяСтрокаТЗ.Субконто_2 = ТекСтрока.Номенклатура;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	ЧтоБлокируем.ИсточникДанных = ТЗ;
	ЧтоБлокируем.ИспользоватьИзИсточникаДанных("Счет","Счет");
	ЧтоБлокируем.ИспользоватьИзИсточникаДанных("Субконто1","Субконто_1");
	ЧтоБлокируем.ИспользоватьИзИсточникаДанных("Субконто2","Субконто_2");
	
	
	Блокировка.Заблокировать();
	
	#КонецОбласти 	
	
	// ---  ЗАПРОС
	
	ПорядокСубконто = Новый Массив;
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Номенклатура);
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Контрагенты);
	
	
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Момент", МоментВремени());
	Запрос.УстановитьПараметр("ПорядокСубконто", ПорядокСубконто);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПродажаТоваровТовары.СчетУчета,
	|	ПродажаТоваровТовары.Номенклатура,
	|	СУММА(ПродажаТоваровТовары.Количество) КАК Количество,
	|	СУММА(ПродажаТоваровТовары.Сумма) КАК Сумма,
	|	ПродажаТоваровТовары.СчетУчета.Забалансовый
	|ПОМЕСТИТЬ ВТДокумент
	|ИЗ
	|	Документ.ПродажаТоваров.Товары КАК ПродажаТоваровТовары
	|ГДЕ
	|	ПродажаТоваровТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПродажаТоваровТовары.СчетУчета,
	|	ПродажаТоваровТовары.Номенклатура,
	|	ПродажаТоваровТовары.СчетУчета.Забалансовый
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроводкиОстатки.Счет,
	|	ПроводкиОстатки.Субконто1,
	|	ПроводкиОстатки.СуммаОстатокДт,
	|	ПроводкиОстатки.КоличествоОстатокДт
	|ПОМЕСТИТЬ ВТОстаткиКонтрагент
	|ИЗ
	|	РегистрБухгалтерии.Проводки.Остатки(
	|			&Момент,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ВТДокумент.СчетУчета
	|				ИЗ
	|					ВТДокумент КАК ВТДокумент),
	|			&ПорядокСубконто,
	|			Организация = &Организация
	|				И Подразделение = &Подразделение
	|				И Субконто2 = &Контрагент
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						ВТДокумент.Номенклатура
	|					ИЗ
	|						ВТДокумент КАК ВТДокумент)) КАК ПроводкиОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДокумент.СчетУчета,
	|	ВТДокумент.СчетУчетаЗабалансовый,
	|	ВТДокумент.Номенклатура,
	|	ВТДокумент.Количество КАК ДокКол,
	|	ВТДокумент.Сумма КАК ДокСум,
	|	ЕСТЬNULL(ВТОстаткиКонтрагент.КоличествоОстатокДт, 0) КАК РегКол,
	|	ВЫБОР
	|		КОГДА ВТОстаткиКонтрагент.СуммаОстатокДт ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ВТОстаткиКонтрагент.КоличествоОстатокДт = 0
	|			ТОГДА 0
	|		КОГДА ВТОстаткиКонтрагент.КоличествоОстатокДт = ВТДокумент.Количество
	|			ТОГДА ВТОстаткиКонтрагент.СуммаОстатокДт
	|		ИНАЧЕ ВТОстаткиКонтрагент.СуммаОстатокДт / ВТОстаткиКонтрагент.КоличествоОстатокДт * ВТДокумент.Количество
	|	КОНЕЦ КАК Себестоимость
	|ИЗ
	|	ВТДокумент КАК ВТДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиКонтрагент КАК ВТОстаткиКонтрагент
	|		ПО ВТДокумент.СчетУчета = ВТОстаткиКонтрагент.Счет
	|			И ВТДокумент.Номенклатура = ВТОстаткиКонтрагент.Субконто1";
	
	Результат = Запрос.Выполнить();
	
	//--ВЫБОРКА ИЗ РЕЗУЛЬТАТА ЗАПРОСА
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		//--ПРОВЕРКА НАЛИЧИЯ УЧТЕННОГО ТМЦ ПО СЧЕТУ ПРИНАДЛЕЖАЩЕГО ДАННОМУ КОНТРАГЕНТУ
		
		Нехватка = Выборка.ДокКол - Выборка.РегКол;
		
		Если Нехватка > 0 Тогда
			
			Отказ = Истина;
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = "Для проведения по данным бухгалтерского учета по счету "
			+ Выборка.СчетУчета + " не хватает номенклатуры """
			+ Выборка.Номенклатура + """. Нехватка составляет " + Нехватка + " ед.";
			
			Сообщение.Сообщить();
			
		КонецЕсли; 
		
		//--Формируем движения в регистре бухгелтрии
		
		Если Отказ = Ложь Тогда
			
			//=========================================================================
			//-- ПРОВОДКА = ДЕБЕТ - НЕТ  СЧЕТА -  КРЕДИТ СЧЕТ ТОВАРЫ НА ХРАНЕНИИ (001) - ЗАЛОГОВАЯ СУММА  
			
			Движение = Движения.Проводки.Добавить();
			
			Движение.Период = Дата;
			Движение.СодержаниеПроводки = "Возврат ТМЦ с хранения";
			Движение.Организация = Организация;
			Движение.Сумма = Выборка.Себестоимость;
			
			
			
			Движение.СчетКт = Выборка.СчетУчета;
			
			Серверный.ЗаполнитьПодразделениеСтороныПроводки(Движение, Подразделение, "Кт");
			Серверный.ЗаполнитьКоличествоСтороныПроводки(Движение, Выборка.ДокКол, "Кт");
			
			Серверный.ЗаполнитьСубконтоСтороныПроводки(Движение, "Номенклатура", Выборка.Номенклатура, "Кт");
			Серверный.ЗаполнитьСубконтоСтороныПроводки(Движение, "Склады", Склад, "Кт");
			Серверный.ЗаполнитьСубконтоСтороныПроводки(Движение, "Контрагенты", Контрагент, "Кт");
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

//Процедура ОбработкаПроведения(Отказ, Режим)

//	Движения.Проводки.Записывать = Истина;
//	
//	КроссКурс = Серверный.ПересчитатьИзВалютыВВалюту(
//	Валюта,,1,Дата);

//	
//	Для Каждого ТекСтрокаТовары Из Товары Цикл
//		
//		Если ТекСтрокаТовары.СчетУчета.Забалансовый Тогда
//			
//			Движение = Движения.Проводки.Добавить();
//			
//			//--Общие для проводки -----
//			Движение.Период = Дата;
//			Движение.Сумма = ТекСтрокаТовары.Стоимость;
//			Движение.СодержаниеПроводки = "Возвращены товары владельцу";
//			Движение.Организация = Организация;
//			
//			//--Дебет -----
//			
//			//Нет счета Дебет!!!
//			
//			//--Кредит ----
//			Движение.СчетКт = ТекСтрокаТовары.СчетУчета;
//			Серверный.ЗаполнитьПодразделениеСтороныПроводки(Движение,Подразделение,"Кт");
//			Серверный.ЗаполнитьСубконтоСтороныПроводки(Движение,"Номенклатура", ТекСтрокаТовары.Номенклатура, "Кт");
//			Серверный.ЗаполнитьСубконтоСтороныПроводки(Движение,"Склады", Склад, "Кт");
//			Серверный.ЗаполнитьСубконтоСтороныПроводки(Движение,"Контрагенты", Контрагент, "Кт");
//			
//		Иначе 	
//			
//			Движение = Движения.Проводки.Добавить();
//			//--Общие для проводки -----
//			Движение.Период = Дата;
//			
//			Движение.Сумма = ТекСтрокаТовары.Сумма * КроссКурс;
//			//Движение.Сумма = Серверный.ПересчитатьИзВалютыВВалюту(
//			//Валюта,,ТекСтрокаТовары.Сумма,Дата);
//			
//			Движение.СодержаниеПроводки = "Выручка от продажи";
//			Движение.Организация = Организация;
//			
//			//--Дебет -----
//			Движение.СчетДт = ПланыСчетов.Счета.ПокупателямОтгрузили;
//			Серверный.ЗаполнитьПодразделениеСтороныПроводки(Движение,Подразделение,"Дт");
//			Серверный.ЗаполнитьСубконтоСтороныПроводки(Движение,"Договоры", Договор, "Дт");
//			Серверный.ЗаполнитьСубконтоСтороныПроводки(Движение,"Контрагенты", Контрагент, "Дт");
//			
//			Серверный.ЗаполнитьВалютуСтороныПроводки
//			(Движение,Валюта,ТекСтрокаТовары.Сумма,"Дт");
//			
//			//--Кредит ----
//			Движение.СчетКт = ПланыСчетов.Счета.РасходыДоходы;
//			Серверный.ЗаполнитьПодразделениеСтороныПроводки(Движение,Подразделение,"Кт");
//			
//			Движение = Движения.Проводки.Добавить();
//			
//			
//			
//			//--Общие для проводки -----
//			Движение.Период = Дата;
//			Движение.Сумма = ТекСтрокаТовары.Стоимость;
//			Движение.СодержаниеПроводки = "Себестоимость продажи";
//			Движение.Организация = Организация;
//			
//			//--Дебет -----
//			Движение.СчетДт = ПланыСчетов.Счета.РасходыДоходы;
//			Серверный.ЗаполнитьПодразделениеСтороныПроводки(Движение,Подразделение,"Дт");
//			
//			//--Кредит ----
//			Движение.СчетКт = ТекСтрокаТовары.СчетУчета;
//			Серверный.ЗаполнитьПодразделениеСтороныПроводки(Движение,Подразделение,"Кт");
//			
//			Серверный.ЗаполнитьСубконтоСтороныПроводки(Движение,"Номенклатура", ТекСтрокаТовары.Номенклатура, "Кт");
//			Серверный.ЗаполнитьСубконтоСтороныПроводки(Движение,"Склады", Склад, "Кт");
//			Серверный.ЗаполнитьСубконтоСтороныПроводки(Движение,"Контрагенты", Контрагент, "Кт");
//			
//		КонецЕсли; 
//		
//	КонецЦикла;

//КонецПроцедуры




